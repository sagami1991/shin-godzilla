{"version":3,"sources":["websocket/WebSocketWrapper.ts"],"names":[],"mappings":"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","file":"websocket/WebSocketWrapper.js","sourcesContent":["import * as WebSocket from 'ws';\r\nimport {SocketType} from \"../share/share\";\r\nimport * as shortid from \"shortid\";\r\n\r\ninterface Msglistner {\r\n\ttype: SocketType;\r\n\tcb: (ws: WebSocket, data: any) => void;\r\n}\r\n\r\ninterface ReqData {\r\n\ttype: SocketType;\r\n\tvalue: any;\r\n}\r\n\r\ninterface SendAllOption {\r\n\tmyWs?: WebSocket;\r\n\tisSelfSend?: boolean;\r\n\ttype: SocketType;\r\n\tvalue: any;\r\n}\r\n\r\nexport class WSWrapper {\r\n\tprivate onConnectListners: Array<(ws: WebSocket) => void > = [];\r\n\tprivate onMsgListners: Msglistner[] = [];\r\n\tprivate onCloseListners: Array<(ws: WebSocket) => void > = [];\r\n\r\n\tconstructor(private wss: WebSocket.Server) {\r\n\t}\r\n\r\n\tpublic addConnectListner(cb: (ws: WebSocket) => void) {\r\n\t\tthis.onConnectListners.push(cb);\r\n\t}\r\n\r\n\tpublic addMsgListner(type: SocketType, cb: (ws: WebSocket, data: any) => void) {\r\n\t\tthis.onMsgListners.push({type: type, cb: cb});\r\n\t}\r\n\r\n\tpublic addCloseListner(cb: (ws: WebSocket) => void) {\r\n\t\tthis.onCloseListners.push(cb);\r\n\t}\r\n\r\n\tpublic init() {\r\n\t\tthis.wss.on('connection', (ws) => {\r\n\t\t\tws.upgradeReq.headers[\"person-id\"] = shortid.generate();\r\n\t\t\tthis.onConnectListners.forEach(cb => cb(ws));\r\n\t\t\tws.on('message', (data, flags) => this.onReqData(ws, data, flags));\r\n\t\t\tws.on(\"close\", (code, message) => {\r\n\t\t\t\tconsole.log(`onclose code: ${code}, msg: ${message}`);\r\n\t\t\t\tthis.onCloseListners.forEach(cb => cb(ws));\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tpublic getPersonId(ws: WebSocket): string {\r\n\t\treturn ws.upgradeReq.headers[\"person-id\"];\r\n\t}\r\n\r\n\tpublic getIpAddr(ws: WebSocket) {\r\n\t\treturn ws.upgradeReq.socket.remoteAddress;\r\n\t}\r\n\tpublic send(ws: WebSocket, type: SocketType, data: any) {\r\n\t\ttry {\r\n\t\t\tws.send(JSON.stringify({type: type, value: data}));\r\n\t\t} catch (e) {\r\n\t\t\tconsole.trace(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/** 全員に送る */\r\n\tpublic sendAll(opt: SendAllOption) {\r\n\t\tthis.wss.clients.forEach(ws => {\r\n\t\t\tif (!opt.isSelfSend && opt.myWs === ws) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tws.send(JSON.stringify({\r\n\t\t\t\t\ttype: opt.type,\r\n\t\t\t\t\tvalue: opt.value\r\n\t\t\t\t}));\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.trace(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * でーた受け取り時\r\n\t */\r\n\tprivate onReqData(ws: WebSocket, data: any, flags: {binary: boolean}) {\r\n\t\tif (typeof data !== \"string\" || data.length > 500) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet reqObj: any;\r\n\t\ttry {\r\n\t\t\treqObj = JSON.parse(data);\r\n\t\t} catch (err) {\r\n\t\t\tconsole.trace(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!this.validateReqData(reqObj)) {\r\n\t\t\tws.close(1008, `不正なデータ検出 ${this.getIpAddr(ws)}`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.onMsgListners.forEach(msgLister => {reqObj.type === msgLister.type ? msgLister.cb(ws, reqObj.value) : null; });\r\n\t}\r\n\r\n\tprivate validateReqData(resData: ReqData) {\r\n\t\tif (!resData || typeof resData.type !== \"number\") {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (resData.type === SocketType.field) {\r\n\t\t\treturn typeof resData.value === \"number\" && resData.value < 3;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n}"],"sourceRoot":"/source/"}