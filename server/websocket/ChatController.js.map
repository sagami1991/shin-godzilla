{"version":3,"sources":["websocket/ChatController.ts"],"names":[],"mappings":";AAGA,sBAAyB,gBAAgB,CAAC,CAAA;AAG1C;IAEC,wBAAoB,IAAoB,EAAU,KAAmB;QAAjD,SAAI,GAAJ,IAAI,CAAgB;QAAU,UAAK,GAAL,KAAK,CAAc;IACrE,CAAC;IAEM,6BAAI,GAAX;QAAA,iBAGC;QAFA,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAA,EAAE,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,EAAE,CAAC,EAApB,CAAoB,CAAC,CAAC;QACxD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,kBAAU,CAAC,OAAO,EAAE,UAAC,EAAE,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,EAAE,EAAE,OAAO,CAAC,EAA9B,CAA8B,CAAC,CAAC;IAC9F,CAAC;IAEO,qCAAY,GAApB,UAAqB,EAAa,EAAE,OAAe;QAClD,IAAM,OAAO,GAAG,EAAC,GAAG,EAAE,OAAO,EAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,kBAAU,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACK,oCAAW,GAAnB,UAAoB,EAAa;QAChC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC;aACtF,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG;YACjB,EAAE,CAAC,CAAC,GAAG,CAAC;gBAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC;gBACJ,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;oBACtB,IAAI,EAAE,kBAAU,CAAC,OAAO;oBACxB,KAAK,EAAE,GAAG,GAAG,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE;iBAC/B,CAAC,CAAC,CAAC;YACL,CAAC;YAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAAA,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACJ,CAAC;IA7Bc,qBAAM,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,cAAc,CAAC;IA8BvE,qBAAC;AAAD,CA/BA,AA+BC,IAAA;AA/BY,sBAAc,iBA+B1B,CAAA","file":"websocket/ChatController.js","sourcesContent":["import * as WebSocket from 'ws';\r\nimport {Collection} from 'mongodb';\r\nimport {MainController} from \"./MainController\";\r\nimport {SocketType} from \"../share/share\";\r\nimport {MongoWrapper} from \"../server\";\r\n\r\nexport class ChatController {\r\n\tprivate static C_NAME = process.env.COLLECTION_NAME || \"maplechatlog\";\r\n\tconstructor(private main: MainController, private mongo: MongoWrapper) {\r\n\t}\r\n\r\n\tpublic init() {\r\n\t\tthis.main.addConnectListner(ws => this.sendInitLog(ws));\r\n\t\tthis.main.addMsgListner(SocketType.chatLog, (ws, reqData) => this.onReceiveMsg(ws, reqData));\r\n\t}\r\n\r\n\tprivate onReceiveMsg(ws: WebSocket, reqData: String) {\r\n\t\tconst chatMsg = {msg: reqData};\r\n\t\tthis.main.sendAll({type: SocketType.chatLog, value: chatMsg});\r\n\t\tthis.mongo.getCollection(ChatController.C_NAME).insert(chatMsg);\r\n\t}\r\n\r\n\t/**\r\n\t * DBから新しい順に数行分のログ取り出して送信\r\n\t */\r\n\tprivate sendInitLog(ws: WebSocket) {\r\n\t\tthis.mongo.getCollection(ChatController.C_NAME).find().limit(30).sort({ $natural: -1 })\r\n\t\t.toArray((err, arr) => {\r\n\t\t\tif (err) console.log(err);\r\n\t\t\ttry {\r\n\t\t\t\tws.send(JSON.stringify({\r\n\t\t\t\t\ttype: SocketType.initlog,\r\n\t\t\t\t\tvalue: arr ? arr.reverse() : []\r\n\t\t\t\t}));\r\n\t\t\t}catch (e) {console.trace(e); }\r\n\t\t});\r\n\t}\r\n}"],"sourceRoot":"/source/"}