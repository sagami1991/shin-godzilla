{"version":3,"sources":["websocket/GameController.ts"],"names":[],"mappings":"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","file":"websocket/GameController.js","sourcesContent":["import * as WebSocket from 'ws';\r\nimport {MainController, ReqData} from \"./MainController\";\r\nimport {GodzillaController} from \"./GodzillaController\";\r\nimport {SocketType, InitialUserData, DbUserData, ReqEvilData, GameData} from \"../share/share\";\r\nimport {UserService} from \"../service/UserService\";\r\nimport * as shortid from \"shortid\";\r\n\r\nexport class GameController {\r\n\tpublic static FRAME = 30;\r\n\tprivate static INIT_USERDATA = {\r\n\t\texp: 0,\r\n\t\tlv: 1,\r\n\t\tname: \"名前\"\r\n\t};\r\n\tprivate godzillaController: GodzillaController;\r\n\tprivate befSendData: GameData;\r\n\tprivate evils: ReqEvilData[] = [];\r\n\tpublic static getRandom<T>(arr: T[]): T  {\r\n\t\treturn arr ? arr[Math.floor(Math.random() * arr.length)] : null;\r\n\t}\r\n\tconstructor(private main: MainController, private userService: UserService) {\r\n\t\tthis.godzillaController = new GodzillaController(main, this.evils);\r\n\t\tthis.godzillaController.init();\r\n\t}\r\n\r\n\tpublic init() {\r\n\t\tthis.main.addCloseListner(ws => this.deleteClosedEvil(ws));\r\n\t\tthis.main.addMsgListner(SocketType.init, (ws, reqData) => this.onReceiveUserId(ws, reqData));\r\n\t\tthis.main.addMsgListner(SocketType.zahyou, (ws, reqData) => this.updateEvils(ws, reqData));\r\n\t\tthis.main.addMsgListner(SocketType.save, (ws, reqData) => this.saveUserData(ws, reqData));\r\n\t\tsetInterval(() => this.intervalAction(), 1000 / GameController.FRAME);\r\n\t}\r\n\r\n\tprivate saveUserData(ws: WebSocket, reqData: DbUserData) {\r\n\t\tthis.userService.updateUser(reqData).catch(e => {\r\n\t\t\tconsole.trace(e);\r\n\t\t\tconsole.log(reqData);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate onReceiveUserId(ws: WebSocket, reqData: {_id: string}) {\r\n\t\tif (!reqData._id) {\r\n\t\t\tthis.sendInitUserData(ws, this.createInitUser());\r\n\t\t} else {\r\n\t\t\tthis.userService.getUser(reqData._id).then((user) => {\r\n\t\t\t\tthis.sendInitUserData(ws, user ? user : this.createInitUser());\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprivate createInitUser(): DbUserData {\r\n\t\tconst initialData = Object.assign({_id: shortid.generate()}, GameController.INIT_USERDATA);\r\n\t\tthis.userService.createUser(initialData);\r\n\t\treturn initialData;\r\n\t}\r\n\r\n\tprivate sendInitUserData(ws: WebSocket, user: DbUserData) {\r\n\t\tthis.main.send(ws, SocketType.init, <InitialUserData> {\r\n\t\t\tpersonId: this.main.getSercretKey(ws),\r\n\t\t\tuserData: user\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tprivate deleteClosedEvil(ws: WebSocket) {\r\n\t\tconst targetIdx = this.evils.findIndex(zahyou => zahyou.personId === this.main.getSercretKey(ws));\r\n\t\tthis.evils.splice(targetIdx, 1);\r\n\t}\r\n\r\n\tprivate intervalAction() {\r\n\t\tthis.godzillaController.roopAction();\r\n\t\tthis.sendGameData();\r\n\t}\r\n\r\n\tprivate sendGameData() {\r\n\t\tconst sendData: GameData = {\r\n\t\t\tgozzila: this.godzillaController.godzilla,\r\n\t\t\tevils: this.evils\r\n\t\t};\r\n\t\tif (JSON.stringify(this.befSendData) !== JSON.stringify(sendData)) {\r\n\t\t\tthis.main.sendAll({\r\n\t\t\t\ttype: SocketType.zahyou,\r\n\t\t\t\tvalue: sendData\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.befSendData = JSON.parse(JSON.stringify(sendData));\r\n\t}\r\n\r\n\tprivate updateEvils(nowWs: WebSocket, reqData: ReqEvilData) {\r\n\t\tconst evilInfo = this.evils.find(zahyou => zahyou.personId === this.main.getSercretKey(nowWs));\r\n\t\tif (evilInfo) {\r\n\t\t\tObject.assign(evilInfo, reqData);\r\n\t\t} else {\r\n\t\t\tthis.evils.push(Object.assign({personId: this.main.getSercretKey(nowWs)}, reqData));\r\n\t\t}\r\n\t}\r\n}"],"sourceRoot":"/source/"}